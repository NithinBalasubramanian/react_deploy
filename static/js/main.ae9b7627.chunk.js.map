{"version":3,"sources":["App.js","components/Footer.js","components/fetch_register.js","components/todo.js","components/states.js","components/covid_data.js","serviceWorker.js","index.js"],"names":["App","props","className","name","Footer","year","Date","getFullYear","State","this","Component","fetch_register","state","posts","axios","get","then","response","setState","data","map","itm","k","id","fname","email","todo","getData","event","new_data","target","value","new_todo","addTodo","e","preventDefault","todo_cont","push","remove_this","splice","type","onChange","placeholder","onClick","States","states","console","log","key_data","Object","keys","ky","dist_data","districtData","Accordion","Card","Header","Toggle","as","Button","variant","eventKey","Collapse","Body","d_itm","d_k","Covid_data","style","width","Title","Subtitle","Text","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ae9b7627.chunk.js","sourcesContent":["import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n//import { render } from 'react-dom';\n\n\nconst App = (props) => \n    <div className=\"Nav-main\">\n      <h1 className=\"App-header\">{props.name}</h1>\n    </div>\n\nexport default App;\n","import React , {Component} from 'react';\r\nimport './../App.css';\r\n\r\n\r\n// const Footer = () =>\r\n//     <footer className=\"footer\">\r\n//         <div className=\"copy\">\r\n//             &copy;  2020 - All Right Reserved\r\n//         </div>\r\n//     </footer>\r\n\r\nclass Footer extends Component{\r\n    constructor(){\r\n        var date = new Date();\r\n        var year = date.getFullYear();\r\n        super()\r\n        this.State = {\r\n            year : year,\r\n            name : 'Pingifinit'\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        return (\r\n             <footer className=\"footer\">\r\n                <div className=\"copy\">\r\n        &copy; {this.State.year}  - All Right Reserved - {this.State.name} \r\n               </div>\r\n            </footer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nclass fetch_register extends Component {\r\n\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            posts : []\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        axios.get(\"http://localhost/pingifinit_blog/Api/fetch_data/user\").then(response=>{\r\n        this.setState({posts:response.data});\r\n    })\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"container pt-5 pb-5\">\r\n            <table className=\"table table-bordered table-striped\">\r\n               <thead>\r\n                    <tr>\r\n                        <td>Id</td>\r\n                        <td>Name</td>\r\n                        <td>Email</td>\r\n                    </tr>   \r\n                </thead> \r\n                <tbody>\r\n                    {this.state.posts.map((itm,k)=>{ \r\n                    return (\r\n                    <tr>\r\n                        <td id={k}>{itm.id}</td>\r\n                        <td>{itm.fname}</td>\r\n                        <td>{itm.email}</td>\r\n                    </tr> \r\n                    ) \r\n                    }) }\r\n                </tbody>\r\n            </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default fetch_register\r\n","import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n class todo extends Component {\r\n    constructor(){\r\n        super()\r\n    this.state = { \r\n        todo : ['nithin','do it'],\r\n        new_todo : \"\",\r\n    }\r\n    }\r\n\r\n    getData =(event) =>{\r\n        let new_data = event.target.value;\r\n        this.setState({\r\n            new_todo : new_data,\r\n        })\r\n    }\r\n\r\n    addTodo = (e) => {\r\n        e.preventDefault();\r\n        let new_data = this.state.new_todo;\r\n        let todo_cont = this.state.todo;\r\n        todo_cont.push(new_data);\r\n        this.setState({ todo : todo_cont });\r\n        this.setState({\r\n            new_todo : ''\r\n        });\r\n    }\r\n\r\n    remove_this = (id) => {\r\n        let data = this.state.todo;\r\n        data.splice(id,1);\r\n        this.setState({\r\n            todo : data\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container pt-4 pb-4\">\r\n            <form className=\"row\">\r\n                <input type=\"text\" className=\"form-control col-md-8\" onChange={ this.getData } value={this.state.new_todo} placeholder=\"Enter TODO Contemt\"/>\r\n                <button className=\"btn btn-sm btn-success col-md-4\" onClick ={ this.addTodo }>Add TODO</button>\r\n            </form>\r\n            <h1>{this.state.new_todo}</h1>\r\n            <table className=\"table table-bordered mt-5 mb-5\">\r\n            <thead>\r\n                <tr>\r\n                    <th>s.No</th>\r\n                    <th>TODO</th>\r\n                    <th>Action</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {this.state.todo.map((itm,k) => {\r\n                    return (\r\n                        <tr>\r\n                            <td>{k+1}</td>\r\n                            <td>{itm}</td>\r\n                            <td><button className=\"btn btn-sm btn-danger\" onClick={ () => { this.remove_this(k) } }>Delete</button></td>\r\n                        </tr>\r\n                    )\r\n                })}\r\n            </tbody>\r\n            </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default todo\r\n","import React , {Component} from 'react';\r\nimport axios from 'axios';\r\nimport { Accordion, Card , Button } from 'react-bootstrap';\r\n\r\nclass States extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            states : {}\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        axios.get(\"https://api.covid19india.org/state_district_wise.json\").then(response => {\r\n            console.log(response.data);\r\n            this.setState({states:response.data});\r\n        })\r\n    }\r\n\r\n    render() {\r\n        \r\n        let key_data = Object.keys(this.state.states);\r\n         \r\n        return(\r\n           \r\n           \r\n            <div>\r\n               {key_data.map((itm,ky) => {\r\n                let dist_data = Object.keys(this.state.states[itm].districtData);\r\n             return(\r\n                <Accordion>\r\n                    <Card>\r\n                        <Card.Header>\r\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n                            {itm}\r\n                        </Accordion.Toggle>\r\n                        </Card.Header>\r\n                        <Accordion.Collapse eventKey=\"0\">\r\n                            <Card.Body>\r\n                                <table className=\"table table-striped table-bordered\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>S No</th>\r\n                                            <th>District</th>\r\n                                            <th>Total</th>\r\n                                            <th>Active</th>\r\n                                            <th>Recover</th>\r\n                                            <th>Death</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        { \r\n                                            dist_data.map((d_itm,d_k) => {\r\n                                                return (\r\n                                                    <tr>\r\n                                                        <td>{d_k}</td>\r\n                                                        <td>{d_itm}</td>\r\n                                                        <td></td>\r\n                                                        <td></td>\r\n                                                        <td></td>\r\n                                                        <td></td>\r\n                                                    </tr>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </tbody>\r\n                                </table>\r\n                            </Card.Body>\r\n                        </Accordion.Collapse>\r\n                    </Card>\r\n                </Accordion>\r\n             )\r\n            })}\r\n            </div>\r\n        )\r\n    \r\n    }\r\n}\r\n\r\nexport default States;","import React , {Component} from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport States from './states';\r\n\r\nclass Covid_data extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            'covid_data' : '',\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container pt-5 pb-5\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">\r\n                    <Card variant=\"info\" style={{ width: '18rem' }}>\r\n                    <Card.Body>\r\n                        <Card.Title>India</Card.Title>\r\n                        <Card.Subtitle className=\"mb-2 text-muted\">Card Subtitle</Card.Subtitle>\r\n                        <Card.Text>\r\n                            Active Cases : 200000\r\n                        </Card.Text>\r\n                    </Card.Body>\r\n                    </Card>\r\n                    </div>\r\n                    <div className=\"col-md-4\"></div>\r\n                    <div className=\"col-md-4\"></div>\r\n                    <div className=\"col-md-12\">\r\n                        <States />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Covid_data;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Footer from './components/Footer';\n//import Register from './components/register';\nimport Fetch from './components/fetch_register';\nimport Todo from './components/todo';\nimport Covid_data from './components/covid_data';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App name=\"pingifinit\" />\n    <Todo />\n    <Fetch />\n    <Covid_data />\n    <Footer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}